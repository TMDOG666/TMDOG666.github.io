<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>TMDOG 的博客</title><link>https://TMDOG666.github.io</link><description>TMDOG 分享技术</description><copyright>TMDOG 的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/174948015?v=4</url><title>avatar</title><link>https://TMDOG666.github.io</link></image><lastBuildDate>Mon, 29 Jul 2024 17:52:14 +0000</lastBuildDate><managingEditor>TMDOG 的博客</managingEditor><ttl>60</ttl><webMaster>TMDOG 的博客</webMaster><item><title>TMDOG的微服务之路_03——Nest.js  的中间件</title><link>https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_03%E2%80%94%E2%80%94Nest.js%20%20-de-zhong-jian-jian.html</link><description># TMDOG的微服务之路_03——Nest.js 的中间件&#13;
## 博客地址：[TMDOG的博客](https://blog.tmdog114514.icu)&#13;
&#13;
在上一篇博客中，我们实现了一个简易的用户管理api的功能。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_03%E2%80%94%E2%80%94Nest.js%20%20-de-zhong-jian-jian.html</guid><pubDate>Mon, 29 Jul 2024 17:51:51 +0000</pubDate></item><item><title>TMDOG的微服务之路_02——nest.js 的初步使用</title><link>https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_02%E2%80%94%E2%80%94nest.js%20-de-chu-bu-shi-yong.html</link><description># TMDOG的微服务之路_02——Nest.js  的初步使用&#13;
&#13;
在上一篇博客中，我们介绍了如何在 Nest.js 中创建一个简单的应用程序，hello world！今天在这篇博客中，我们将进一步探讨如何使用 Nest.js 的 Controller 来处理 HTTP 请求，并了解service 与 module。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_02%E2%80%94%E2%80%94nest.js%20-de-chu-bu-shi-yong.html</guid><pubDate>Sat, 27 Jul 2024 08:55:05 +0000</pubDate></item><item><title>TMDOG的微服务之路_01——nest.js 快速入门</title><link>https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_01%E2%80%94%E2%80%94nest.js%20-kuai-su-ru-men.html</link><description># TMDOG的微服务之路_01——nest.js 快速入门&#13;
&#13;
## **博客地址：[TMDOG 的博客](https://blog.tmdog114514.icu)**&#13;
&#13;
&#13;
今天我们开始入门nest.js，学习nest.js项目快速的搭建。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/TMDOG-de-wei-fu-wu-zhi-lu-_01%E2%80%94%E2%80%94nest.js%20-kuai-su-ru-men.html</guid><pubDate>Fri, 26 Jul 2024 10:17:01 +0000</pubDate></item><item><title>Kafka的控制器和投票者：分布式聚会中的选举与仲裁</title><link>https://TMDOG666.github.io/post/Kafka-de-kong-zhi-qi-he-tou-piao-zhe-%EF%BC%9A-fen-bu-shi-ju-hui-zhong-de-xuan-ju-yu-zhong-cai.html</link><description># Kafka的控制器和投票者：分布式聚会中的选举与仲裁&#13;
&#13;
## 博客地址：[TMDOG的博客](https://blog.tmdog114514.icu/)&#13;
&#13;
## 引言&#13;
&#13;
在上一节聚会中，我们了解了Kafka的主要角色和基本概念。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/Kafka-de-kong-zhi-qi-he-tou-piao-zhe-%EF%BC%9A-fen-bu-shi-ju-hui-zhong-de-xuan-ju-yu-zhong-cai.html</guid><pubDate>Sun, 21 Jul 2024 14:17:38 +0000</pubDate></item><item><title>Docker服务器上部署最新版Kafka</title><link>https://TMDOG666.github.io/post/Docker-fu-wu-qi-shang-bu-shu-zui-xin-ban-Kafka.html</link><description>## Docker服务器上部署最新版Kafka&#13;
### 博客地址：https://blog.tmdog114514.icu&#13;
&#13;
### 前提条件&#13;
在开始之前，请确保你已经安装了以下环境：&#13;
1. Docker&#13;
&#13;
### 创建目录&#13;
首先，我们需要创建一个目录来存储Kafka的相关数据：&#13;
```bash&#13;
mkdir -p /data/deploy/kafkaCluster/kraft&#13;
```&#13;
&#13;
### 创建docker-compose.yaml文件&#13;
在你自己的目录下创建一个名为`docker-compose.yaml`的文件，并添加以下内容：&#13;
我是在root目录下创建了kafka_config文件夹&#13;
![image](https://github.com/user-attachments/assets/08c20808-60b2-44a8-b3c6-175b74d0e1f7)&#13;
&#13;
在docker-compose.yaml下：&#13;
&#13;
```yaml&#13;
version: '3'&#13;
services:&#13;
   kafka:&#13;
     image: 'bitnami/kafka:latest'&#13;
     user: root&#13;
     environment:&#13;
       - KAFKA_ENABLE_KRAFT=yes&#13;
       - KAFKA_CFG_PROCESS_ROLES=broker,controller&#13;
       - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER&#13;
       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093&#13;
       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT&#13;
       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://ip:9092&#13;
       - KAFKA_BROKER_ID=1&#13;
       - KAFKA_CFG_NODE_ID=1&#13;
       - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093&#13;
       - ALLOW_PLAINTEXT_LISTENER=yes&#13;
     volumes:&#13;
       - /data/deploy/kafkaCluster/kraft:/bitnami/kafka:rw&#13;
     ports:&#13;
       - '9092:9092'&#13;
       - '9093:9093'&#13;
```&#13;
&#13;
### 配置解释&#13;
- `version: '3'`：指定Docker Compose文件的版本。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/Docker-fu-wu-qi-shang-bu-shu-zui-xin-ban-Kafka.html</guid><pubDate>Thu, 18 Jul 2024 03:56:16 +0000</pubDate></item><item><title>Kafka：组织一场分散的同学聚会</title><link>https://TMDOG666.github.io/post/Kafka%EF%BC%9A-zu-zhi-yi-chang-fen-san-de-tong-xue-ju-hui.html</link><description># Kafka：组织一场分散的同学聚会&#13;
&#13;
## 引言&#13;
&#13;
假设我们参加了一场大型的同学聚会，但是这个同学聚会却分散在不同的地点；在这个同学聚会里，每个人被分配到不同的角色，都有自己的独特职责。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/Kafka%EF%BC%9A-zu-zhi-yi-chang-fen-san-de-tong-xue-ju-hui.html</guid><pubDate>Wed, 17 Jul 2024 15:03:43 +0000</pubDate></item><item><title>基于express框架 + redis的邮件验证的后端Demo</title><link>https://TMDOG666.github.io/post/ji-yu-express-kuang-jia-%20%2B%20redis-de-you-jian-yan-zheng-de-hou-duan-Demo.html</link><description>## 学习构建邮箱验证系统：&#13;
&#13;
突然想尝试一下怎么实现一个邮箱验证的功能&#13;
&#13;
### 遇见技术爬爬虾&#13;
&#13;
一切都始于在B站上看到了技术爬爬虾（一个非常有名的技术 UP 主）的视频。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/ji-yu-express-kuang-jia-%20%2B%20redis-de-you-jian-yan-zheng-de-hou-duan-Demo.html</guid><pubDate>Mon, 15 Jul 2024 03:25:57 +0000</pubDate></item><item><title>tmdog的第一篇文章</title><link>https://TMDOG666.github.io/post/tmdog-de-di-yi-pian-wen-zhang.html</link><description>tmdog的博客。</description><guid isPermaLink="true">https://TMDOG666.github.io/post/tmdog-de-di-yi-pian-wen-zhang.html</guid><pubDate>Sun, 07 Jul 2024 14:15:57 +0000</pubDate></item></channel></rss>